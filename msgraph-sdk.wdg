#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : msgraph-sdk
 major_version : 30
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x18c04c4300788f9c
 internal_properties : HgAAAB4AAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     code : |1-
      MSGraphUserInfo is structure
      	sOdataContext		IS string, serialize = "@odata.context"
      	businessPhones	IS ARRAY OF STRING
      	sDisplayName		IS STRING, serialize ="displayName"
      	sGivenName			IS STRING, serialize = "givenName"
      	sJobTitle			IS STRING, serialize = "jobTitle"
      	sMail				IS STRING, serialize = "mail"
      	sMobilePhone		IS STRING, serialize = "mobilePhone"
      	sOfficeLocation		IS STRING, serialize = "officeLocation"
      	sPreferredLanguage	IS STRING, serialize = "preferredLanguage"
      	sSurname			IS STRING, serialize = "surname"
      	sUserPrincipalName	IS STRING, serialize = "userPrincipalName"
      	sId					IS STRING, serialize = "id"
      END
      
      MSGraphEmailAddress is structure
      	sName		IS STRING, serialize="name"
      	sAddress	IS STRING, serialize="address"
      END
      
      MSGraphEmailRecipient is structure
      	emailAddress IS MSGraphEmailAddress, serialize="emailAddress"
      END
      
      MSGraphEmailBody is structure
      	sContentType	IS STRING, serialize="contentType"
      	sContent		IS STRING, serialize="content"
      END
      MSGraphEmailFlag is structure
      	sFlagStatus IS STRING, serialize="flagStatus"
      END
      
      MSGraphEmailMessage is structure
      	sOdataEtag					IS STRING, serialize="@odata.etag"
      	sId							IS STRING, serialize="id"
      	sCreatedDateTime			IS STRING, serialize="createdDateTime"
      	sLastModifiedDateTime		IS STRING, serialize="lastModifiedDateTime"
      	sChangeKey					IS STRING, serialize="changeKey"
      	categories					IS ARRAY OF STRING
      	sReceivedDateTime			IS STRING, serialize="receivedDateTime"
      	sSentDateTime				IS STRING, serialize="sentDateTime"
      	bHasAttachments				IS BOOLEAN, serialize="hasAttachments"
      	sInternetMessageId			IS STRING, serialize="internetMessageId"
      	sSubject					IS STRING, serialize="subject"
      	sBodyPreview				IS STRING, serialize="bodyPreview"
      	sImportance					IS STRING, serialize="importance"
      	sParentFolderId				IS STRING, serialize="parentFolderId"
      	sConversationId				IS STRING, serialize="conversationId"
      	sConversationIndex			IS STRING, serialize="conversationIndex"
      	bIsDeliveryReceiptRequested	IS BOOLEAN, serialize="isDeliveryReceiptRequested"
      	bIsReadReceiptRequested		IS BOOLEAN, serialize="isReadReceiptRequested"
      	bIsRead						IS BOOLEAN, serialize="isRead"
      	bIsDraft					IS BOOLEAN, serialize="isDraft"
      	sWebLink					IS STRING, serialize="webLink"
      	sInferenceClassification	IS STRING, serialize="inferenceClassification"
      	body						IS MSGraphEmailBody, serialize="body"
      	sender						IS MSGraphEmailRecipient, serialize="sender"
      	from						IS MSGraphEmailRecipient, serialize="from"
      	toRecipients				IS ARRAY OF MSGraphEmailRecipient
      	ccRecipients				IS ARRAY OF MSGraphEmailRecipient
      	bccRecipients				IS ARRAY OF MSGraphEmailRecipient
      	replyTo						IS ARRAY OF MSGraphEmailRecipient
      	flag						IS MSGraphEmailFlag, serialize="flag"
      END
      
      MSGraphEmailMessageList is Structure
      	sOdataContext	is string, serialize="@odata.context"
      	value		is array of MSGraphEmailMessage JSON
      	sOdataNextLink	is string, serialize="@odata.nextLink"
      end
      
      MSGRaphSingleEmailMessage is structure
      	sOdataContext				IS STRING, serialize="@odata.context"
      	sOdataEtag					IS STRING, serialize="@odata.etag"
      	sId							IS STRING, serialize="id"
      	sCreatedDateTime			IS STRING, serialize="createdDateTime"
      	sLastModifiedDateTime		IS STRING, serialize="lastModifiedDateTime"
      	sChangeKey					IS STRING, serialize="changeKey"
      	categories					IS ARRAY OF STRING
      	sReceivedDateTime			IS STRING, serialize="receivedDateTime"
      	sSentDateTime				IS STRING, serialize="sentDateTime"
      	bHasAttachments				IS BOOLEAN, serialize="hasAttachments"
      	sInternetMessageId			IS STRING, serialize="internetMessageId"
      	sSubject					IS STRING, serialize="subject"
      	sBodyPreview				IS STRING, serialize="bodyPreview"
      	sImportance					IS STRING, serialize ="importance"
      	sParentFolderId				IS STRING, serialize="parentFolderId"
      	sConversationId				IS STRING, serialize="conversationId"
      	sConversationIndex			IS STRING, serialize="conversationIndex"
      	bIsDeliveryReceiptRequested	IS BOOLEAN, serialize = "isDeliveryReceiptRequested"
      	bIsReadReceiptRequested		IS BOOLEAN, serialize = "isReadReceiptRequested"
      	bIsRead						IS BOOLEAN, serialize = "isRead"
      	bIsDraft					IS BOOLEAN, Serialize = "isDraft"
      	sWebLink					IS STRING, serialize="webLink"
      	sInferenceClassification	IS STRING, serialize="inferenceClassification"
      	body						IS MSGraphEmailBody, Serialize = "body"
      	sender						IS MSGraphEmailRecipient, serialize	= "sender"
      	from						IS MSGraphEmailRecipient, serialize	= "from"
      	toRecipients				IS ARRAY OF MSGraphEmailRecipient
      	ccRecipients				IS ARRAY OF MSGraphEmailRecipient
      	bccRecipients				IS ARRAY OF MSGraphEmailRecipient
      	replyTo						IS Array of MSGraphEmailRecipient
      	flag						IS MSGraphEmailFlag, serialize	= "flag"
      END
      
      MSGraphEmailMessageAttachment is structure
      	sOdataType				IS STRING, serialize="@odata.type"
      	sOdataMediaContentType	IS STRING, serialize="@odata.mediaContentType"
      	sId						IS STRING, serialize="id"
      	sLastModifiedDateTime	IS STRING, serialize="lastModifiedDateTime"
      	sName					IS STRING, serialize="name"
      	sContentType			IS STRING, serialize="contentType"
      	nSize					IS INT, serialize="size"
      	bIsInline				IS BOOLEAN, serialize	= "isInline"
      	sContentId				IS STRING, serialize="contentId"
      	sContentLocation		IS STRING, serialize="contentLocation"
      	sContentBytes			IS STRING, serialize="contentBytes"
      END
      
      MSGraphEmailMessageAttachmentList is structure
      	sOdataContext	IS STRING, Serialize="@odata.context"
      	value		IS ARRAY OF MSGraphEmailMessageAttachment
      END
      
      MSGraphContext is structure
      	vTenantId		is string, serialize="tenant_id"
      	vClientID		is string, serialize="client_id"
      	vClientSecret	is string, serialize="client_secret_id"
      	vTokenPath		is string, serialize="token_path"
      	vForceClear		is boolean, serialize="force_clear"
      end
      
      gMSGraphContext is MSGraphContext
     type : 720896
  procedures :
   -
     name : Logger_WriteToFile
     procedure_id : 1783509303093202844
     type_code : 15
     code : |1-
      // Summary: <specify the procedure action>
      // Syntax:
      //Logger_WriteToFile (<sLineToWrite> is string)
      //
      // Parameters:
      //	sLineToWrite (ANSI string): 
      // Example:
      // <Specify a usage example>
      //
      procedure Logger_WriteToFile(sLineToWrite is string)
      trace(fCurrentDir)
      LogPath			is string	= fCurrentDir() + "\EmailSender.log"; 
      if NOT fFileExist(LogPath) THEN
      	fCreate(LogPath)
      END
      nFileNum		is int		= fOpen(LogPath, foAdd)
      sLineToWrite = DateToString(Today(), "YYYY MM DD")+ "/" + TimeToString(TimeSys(), "HH:MM:SS") + " - " + sLineToWrite
      fWriteLine(nFileNum, sLineToWrite)
      fClose(nFileNum)
     type : 458752
   -
     name : MSGraph_SendRawEmail
     procedure_id : 1783509303093268380
     type_code : 15
     code : |1-
      // Summary: <specify the procedure action>
      // Syntax:
      //[ <Result> = ] MSGraph_SendRawEmail (<authToken> is AuthToken)
      //
      // Parameters:
      //	authToken (AuthToken): <specify the role of authToken>
      // Example:
      // <Specify a usage example>
      //
      //	Token (AuthToken):
      procedure MSGraph_SendRawEmail(authToken is AuthToken)
      
      req				is httpRequest
      req.ContentType	= typeMimeJSON
      req.Method		= httpPost
      req.URL			= "https://graph.microsoft.com/v1.0/me/sendMail"
      req.AuthToken	= authToken // Authentication token
      
      msg is ANSI string = [
      	{
      		"message": 
      		{
      			"subject": "Using MS Entra ID OAuth2",
      			 "body": {
      			      "contentType": "Text",
      			      "content": "Meet me for launch!. The new cafeteria is open. Email sent using MS Entra ID OAuth2"
      	    	},
      	    	"toRecipients":[
      	    	{
      	    			"emailAddress": {
                			"address": "ftaiana@orionedp.ch",
                			}
      	    	},
      	    	{
      	    			"emailAddress": {
                			"address": "ftaiana@orionedp.ch"
                			}		
      	    	}],
      	    	"ccRecipients": [{
      	    	  	"emailAddress": {
                			"address": "yariel.re@gmail.com"
              		}
      	    	}],
      	    	"attachments": [{
      		    	"@odata.type": "#microsoft.graph.fileAttachment",
      			    "name": "nuovo-attachment.txt",
      			    "contentType": "text/plain",
      			    "contentBytes": "SGVsbG8gV29ybGQh"
      	    	}],
      		}
      	}
      ]
      
      req.Content 	= StringToJSON(msg)
      
      HTTPresponse is httpResponse = HTTPSend(req)
      
      Logger_WriteToFile("Email sent request response code: " + HTTPresponse.StatusCode);
      
      
      RETURN HTTPresponse.StatusCode
     type : 458752
   -
     name : MSGraph_SendMessage
     procedure_id : 1783509303093333916
     type_code : 15
     code : |1-
      // Summary: <specify the procedure action>
      // Syntax:
      //[ <Result> = ] MSGraph_SendMessage (<iMSGraphContext> is MSGraphContext, <iMessage> is Email)
      //
      // Parameters:
      //	iMSGraphContext (MSGraphContext): <specify the role of authToken>
      //	iMessage (Email): <specify the role of Email>
      // Example:
      // <Specify a usage example>
      //
      //	Token (AuthToken):
      //	myMessage (Email - default value=0): <specify the role of mail>
      procedure MSGraph_SendMessage(iMSGraphContext is MSGraphContext, iMessage is Email)
      
      vToken is AuthToken = MSGraph_GetAuthToken(iMSGraphContext)
      
      iMessage.BuildSource(emailOptionEncodeHeader)
      iMessageBuffer is  Buffer
      iMessageBuffer	= iMessage.Source
      
      req				is httpRequest
      req.ContentType	= typeMimeText
      req.Method		= httpPost
      req.URL			= "https://graph.microsoft.com/v1.0/me/sendMail"
      req.AuthToken	= vToken // Authentication token
      req.Content 	= iMessageBuffer.Encode(encodeBASE64)
      
      HTTPresponse is httpResponse = HTTPSend(req)
      IF ErrorOccurred THEN
      	ErrorPropagate(ErrorInfo(errCode), ErrorInfo(errFullDetails))
      END
      
      Logger_WriteToFile("Email sent request response code: " + HTTPresponse.StatusCode);
      
      RETURN HTTPresponse.StatusCode
     type : 458752
   -
     name : MSGraph_GetAuthToken
     procedure_id : 1783509303093530524
     type_code : 15
     code : |1-
      // Summary: <specify the procedure action>
      // Syntax:
      //[ <Result> = ] MSGraph_GetAuthToken (<iMSGraphContext> is MSGraphContext [, <iForceClear> is boolean])
      //
      // Parameters:
      //	iMSGraphContext (MSGraphContext): <specify the role of iTenant>
      //	iForceClear (boolean - default value=0): <specify the role of iForceClear>
      // Example:
      // <Specify a usage example>
      //
      // Return value:
      //	iClientId (ANSI string): <specify the role of iClientId>
      //	iClientSecret (ANSI string): <specify the role of iClientSecret>
      procedure MSGraph_GetAuthToken(iMSGraphContext is MSGraphContext,  iForceClear is boolean = false)
      
      OAuth2Params	is OAuth2Parameters
      
      TenantId		is string			= iMSGraphContext.vTenantId
      OAuth2Params.ClientID				= iMSGraphContext.vClientID
      OAuth2Params.ClientSecret			= iMSGraphContext.vClientSecret
      OAuth2Params.AuthURL				= "https://login.microsoftonline.com/"+TenantId+"/oauth2/v2.0/authorize"
      OAuth2Params.TokenURL				= "https://login.microsoftonline.com/"+TenantId+"/oauth2/v2.0/token"
      OAuth2Params.Scope					= "User.Read Mail.Send Mail.ReadWrite offline_access"
      OAuth2Params.RedirectionURL			= "http://localhost:5011"
      
      bufferMyToken	is Buffer
      MyToken			is AuthToken
      TokenPath		is string	= iMSGraphContext.vTokenPath
      
      IF iForceClear = true _AND_ fFileExist(TokenPath) THEN
      	fDelete(TokenPath)
      END
      
      WHEN EXCEPTION IN
      	bufferMyToken = fLoadBuffer(TokenPath)
      	Désérialise(MyToken,bufferMyToken,psdBinary)
      	Logger_WriteToFile("Token deserializzato e correttamente recuperato!")
      DO
      	Logger_WriteToFile("Non è stato possibile recuperare il token da file! Deve essere richiesto!")
      
      	MyToken = AuthIdentify(OAuth2Params)
      	Serialize(MyToken, bufferMyToken, psdBinary)
      	fSaveBuffer(TokenPath, bufferMyToken)
      
      	Logger_WriteToFile("Nuovo token richiesto e serializzato!")
      
      	RESULT MyToken
      END
      
      if NOT (MyToken.Valid) THEN
      	Logger_WriteToFile("Token completamente scaduto. Un nuovo token deve essere richiesto!")
      
      	MyToken = AuthIdentify(OAuth2Params)
      	Serialize(MyToken, bufferMyToken, psdBinary)
      	fSaveBuffer(TokenPath, bufferMyToken)
      
      	Logger_WriteToFile("Nuovo token richiesto e serializzato!")
      
      	RESULT MyToken
      END
      
      
      IF (MyToken.DateExpiration -5 min < DateTimeLocalToUTC(SysDateTime())) _AND_
      	MyToken.Refresh <> "" THEN
      
      	Logger_WriteToFile("Token prossimo alla scadenza!. Il token sara' aggiornato!")
      	MyToken = AuthRefreshToken(MyToken)
      
      	IF MyToken.Valid THEN
      		Serialize(MyToken, bufferMyToken, psdBinary)
      		fSaveBuffer(TokenPath, bufferMyToken)
      		Logger_WriteToFile("Token aggiornato e serializzato!")
      	ELSE
      		Logger_WriteToFile("Non è stato possibile aggiornare il token. Un nuovo token deve essere richiesto!")
      
      		MyToken = AuthIdentify(OAuth2Params)
      		Serialize(MyToken, bufferMyToken, psdBinary)
      		fSaveBuffer(TokenPath, bufferMyToken)
      
      		Logger_WriteToFile("Nuovo token richiesto e serializzato!")
      	END
      
      	RESULT MyToken
      END
      
      
      
      //IF MyToken.DateExpiration < DateTimeLocalToUTC(SysDateTime()) THEN
      //
      //	LogToFile("Token completamente scaduto. Un nuovo token deve essere richiesto!")
      //
      //	MyToken = AuthIdentify(OAuth2Params)
      //	Serialize(MyToken, bufferMyToken, psdBinary)
      //	fSaveBuffer(TokenPath, bufferMyToken)
      //
      //	LogToFile("Nuovo token richiesto e serializzato!")
      //
      //END
      
      
      result MyToken
     type : 458752
   -
     name : MSGraph_GetContext
     procedure_id : 1783509303093596060
     type_code : 15
     code : |1+
      // Summary: <specify the procedure action>
      // Syntax:
      //[ <Result> = ] MSGraph_GetContext ()
      //
      // Parameters:
      //	None
      // Example:
      // <Specify a usage example>
      //
      // Return value:
      procedure MSGraph_GetContext()
      //TODO: Validate MSGraphContext properties
      return gMSGraphContext
     type : 458752
   -
     name : MSGraph_Test
     procedure_id : 1783509303093792668
     type_code : 15
     code : |1+
      
      procedure MSGraph_Test()
      jsonData is string = fLoadText("msgraphcontext.json")
      vMSGraphContext is MSGraphContext
      Deserialize(vMSGraphContext, jsonData, psdJSON)
      
      MSGraph_SetContext(vMSGraphContext.vTenantId, vMSGraphContext.vClientID, vMSGraphContext.vClientSecret)
      
      vMSGraphContext  = MSGraph_GetContext()
      vToken is AuthToken = MSGraph_GetAuthToken(vMSGraphContext)
      
      Trace(vToken.ExpirationDate)
      
      myMessage is Email
      myMessage.Message	= "My email text"
      myMessage.HTML		= "Message <p>Test message with attachments. <b>Arrived?</b></p>"
      myMessage.Sender	= "yrodriguez@orionedp.ch"
      myMessage.Subject	= "Test: Microsoft Graph API"
      myMessage.Recipient.Add("yrodriguez@orionedp.ch")
      //myMessage.Recipient.Add("edelgaudio@orionedp.ch")
      
      
      //sFile			is a string	= "c:\temp\test.png"
      //myAttachment	is an emailAttache
      //myAttachment.Name					= fExtractPath (sFile , fFileName + fExtension)
      //myAttachment.Content				= fLoadBuffer (sFile)
      //myAttachment.ContentType			= "image/png"
      //myAttachment.ContentDescription		= "An attached image"
      //myMessage.Attach.Add(myAttachment)
      //
      //sfile2			is a string	= "c:\temp\fattura.pdf"
      //myattachment2	is an emailattache
      //myattachment2.name						= fextractpath (sfile2 , ffilename + fextension)
      //myattachment2.content					= floadbuffer (sfile2)
      //myattachment2.contenttype				= "application/pdf"
      //myattachment2.contentdescription		= "an attached pdf document"
      //myMessage.attach.add(myattachment2)
      //
      
      MSGraph_SendMessage(vMSGraphContext, myMessage)
      
      vResultReadMe is MSGraphUserInfo =  MSGraph_ReadMe(vMSGraphContext)
      
      Info(vResultReadMe.sDisplayName)
      
      vResultMeMessages is MSGraphEmailMessageList =  MSGraph_ReadMessages(vMSGraphContext)
      Info(vResultMeMessages.value.Count)
      
      vMessage is  MSGraphEmailMessage =  vResultMeMessages.value[2]
      
      vReadMessageResponse is MSGRaphSingleEmailMessage =  MSGraph_ReadMessage(vMSGraphContext, vMessage.sId)
      
      vReadMessageAttachmentsResult is MSGraphEmailMessageAttachmentList =  MSGraph_ReadMessageAttachments(vMSGraphContext, vMessage.sId)
      
      if vReadMessageAttachmentsResult.value.Count > 0 THEN
      	Info(vReadMessageAttachmentsResult.value.Count)
      	vResultSaveAttachment is string = MSGraph_SaveMessageAttachment(vReadMessageAttachmentsResult.value [1],fExeDir)
      	Info(vResultSaveAttachment)
      END
      
     type : 458752
   -
     name : MSGraph_ReadMe
     procedure_id : 1783509303093858204
     type_code : 15
     code : |1+
      // Summary: <specify the procedure action>
      // Syntax:
      //[ <Result> = ] MSGraph_ReadMe (<iMSGraphContext> is MSGraphContext)
      //
      // Parameters:
      //	iMSGraphContext (MSGraphContext):
      // Example:
      // <Specify a usage example>
      //
      procedure MSGraph_ReadMe(iMSGraphContext is MSGraphContext) : MSGraphUserInfo
      
      vToken is AuthToken = MSGraph_GetAuthToken(iMSGraphContext)
      
      wHttpRequest				is httpRequest
      wHttpRequest.ContentType	= typeMimeText
      wHttpRequest.Method			= httpGet
      wHttpRequest.URL			= "https://graph.microsoft.com/v1.0/me"
      wHttpRequest.AuthToken		= 	vToken // Authentication token
      
      wHttpResponse is httpResponse = HTTPSend(wHttpRequest)
      
      IF ErrorOccurred THEN
      	ErrorPropagate(ErrorInfo(errCode), ErrorInfo(errMessage))
      END
      
      oDeserializedData is MSGraphUserInfo
      IF NOT wHttpResponse.StatusCode = 200 THEN
      	RETURN  oDeserializedData
      END
      
      Deserialize(oDeserializedData, wHttpResponse.Content, psdJSON)
      IF ErrorOccurred THEN
      	ErrorPropagate(ErrorInfo(errCode), ErrorInfo(errMessage))
      END
      
      RETURN oDeserializedData
      
      
     type : 458752
   -
     name : MSGraph_ReadMessages
     procedure_id : 1783509303093923740
     type_code : 15
     code : |1+
      // Summary: <specify the procedure action>
      // Syntax:
      //[ <Result> = ] MSGraph_ReadMessages (<iToken> is AuthToken)
      //
      // Parameters:
      //	iToken (AuthToken):
      // Example:
      // <Specify a usage example>
      //
      procedure MSGraph_ReadMessages(iMSGraphContext is MSGraphContext)
      //GET https://graph.microsoft.com/v1.0/me/messages?$top=50&$select=receivedDateTime,id,sender,subject,body,isRead
      //GET https://graph.microsoft.com/v1.0/users/{user-id}/messages
      
      vToken is AuthToken = MSGraph_GetAuthToken(iMSGraphContext)
      
      wHttpRequest				is httpRequest
      wHttpRequest.ContentType	= typeMimeText
      wHttpRequest.Method			= httpGet
      wHttpRequest.URL			= "https://graph.microsoft.com/v1.0/me//mailFolders/inbox/messages" //?$top=2
      wHttpRequest.AuthToken	= 	vToken // Authentication token
      
      wHttpResponse is httpResponse = HTTPSend(wHttpRequest)
      
      Trace(wHttpResponse.Content)
      IF ErrorOccurred THEN
      	ErrorPropagate(ErrorInfo(errCode), ErrorInfo(errMessage))
      END
      
      oDeserializedData is MSGraphEmailMessageList
      IF NOT wHttpResponse.StatusCode = 200 THEN
      	RETURN  oDeserializedData
      END
      
      Deserialize(oDeserializedData, wHttpResponse.Content, psdJSON)
      IF ErrorOccurred THEN
      	ErrorPropagate(ErrorInfo(errCode), ErrorInfo(errMessage))
      END
      
      RETURN oDeserializedData
      
      
     type : 458752
   -
     name : MSGraph_ReadMessage
     procedure_id : 1783509303093989276
     type_code : 15
     code : |1+
      // Summary: <specify the procedure action>
      // Syntax:
      //[ <Result> = ] MSGraph_ReadMessage (<iMSGraphContext> is MSGraphContext, <iMessageId> is string)
      //
      // Parameters:
      //	iMSGraphContext (MSGraphContext):
      //	iMessageId (ANSI string): <specify the role of iMessageId>
      // Example:
      // <Specify a usage example>
      //
      procedure MSGraph_ReadMessage(iMSGraphContext is MSGraphContext, iMessageId is string)
      //GET https://graph.microsoft.com/v1.0/me/messages?$top=50&$select=receivedDateTime,id,sender,subject,body,isRead
      //GET https://graph.microsoft.com/v1.0/users/{user-id}/messages
      
      vToken is AuthToken = MSGraph_GetAuthToken(iMSGraphContext)
      
      wHttpRequest				is httpRequest
      wHttpRequest.ContentType	= typeMimeText
      wHttpRequest.Method			= httpGet
      wHttpRequest.URL			= "https://graph.microsoft.com/v1.0/me/messages/"+iMessageId
      wHttpRequest.AuthToken	= 	vToken // Authentication token
      
      wHttpResponse is httpResponse = HTTPSend(wHttpRequest)
      
      Trace(wHttpResponse.Content)
      IF ErrorOccurred THEN
      	ErrorPropagate(ErrorInfo(errCode), ErrorInfo(errMessage))
      END
      
      oDeserializedData is MSGRaphSingleEmailMessage
      IF NOT wHttpResponse.StatusCode = 200 THEN
      	RETURN  oDeserializedData
      END
      
      Deserialize(oDeserializedData, wHttpResponse.Content, psdJSON)
      IF ErrorOccurred THEN
      	ErrorPropagate(ErrorInfo(errCode), ErrorInfo(errMessage))
      END
      
      RETURN oDeserializedData
      
      
     type : 458752
   -
     name : MSGraph_ReadMessageAttachments
     procedure_id : 1783509303094054812
     type_code : 15
     code : |1+
      // Summary: <specify the procedure action>
      // Syntax:
      //[ <Result> = ] MSGraph_ReadMessageAttachments (<iMSGraphContext> is MSGraphContext, <iMessageId> is string)
      //
      // Parameters:
      //	iMSGraphContext (MSGraphContext):
      //	iMessageId (ANSI string): <specify the role of iMessageId>
      // Example:
      // <Specify a usage example>
      //
      procedure MSGraph_ReadMessageAttachments(iMSGraphContext is MSGraphContext, iMessageId is string)
      //GET https://graph.microsoft.com/v1.0/me/messages?$top=50&$select=receivedDateTime,id,sender,subject,body,isRead
      //GET https://graph.microsoft.com/v1.0/users/{user-id}/messages
      
      vToken is AuthToken = MSGraph_GetAuthToken(iMSGraphContext)
      
      wHttpRequest				is httpRequest
      wHttpRequest.ContentType	= typeMimeText
      wHttpRequest.Method			= httpGet
      wHttpRequest.URL			= "https://graph.microsoft.com/v1.0/me/messages/"+iMessageId+"/attachments"
      wHttpRequest.AuthToken		= 	vToken // Authentication token
      
      wHttpResponse is httpResponse = HTTPSend(wHttpRequest)
      
      Trace(wHttpResponse.Content)
      IF ErrorOccurred THEN
      	ErrorPropagate(ErrorInfo(errCode), ErrorInfo(errMessage))
      END
      
      oDeserializedData is MSGraphEmailMessageAttachmentList
      IF NOT wHttpResponse.StatusCode = 200 THEN
      	RETURN  oDeserializedData
      END
      
      Deserialize(oDeserializedData, wHttpResponse.Content, psdJSON)
      IF ErrorOccurred THEN
      	ErrorPropagate(ErrorInfo(errCode), ErrorInfo(errMessage))
      END
      
      RETURN oDeserializedData
      
      
     type : 458752
   -
     name : MSGraph_SaveMessageAttachment
     procedure_id : 1783509303094120348
     type_code : 15
     code : |1+
      // Summary: <specify the procedure action>
      // Syntax:
      //[ <Result> = ] MSGraph_SaveMessageAttachment (<iAttachment> is MSGraphEmailMessageAttachment, <iDestinationFolder> is string)
      //
      // Parameters:
      //	iAttachment (MSGraphEmailMessageAttachment):
      //	iDestinationFolder (ANSI string): <specify the role of iDestinationFolder>
      // Example:
      // <Specify a usage example>
      //
      procedure MSGraph_SaveMessageAttachment(iAttachment is MSGraphEmailMessageAttachment, iDestinationFolder is string)
      if iAttachment = Null THEN
      	result ""
      END
      
      if iDestinationFolder ~= "" or iDestinationFolder = Null THEN
      	RESULT ""
      END
      
      iAttachmentFullFilePath is string	= CompleteDir(iDestinationFolder) +  iAttachment.sName
      iAttachmentBuffer is buffer = iAttachment.sContentBytes
      fSaveBuffer(iAttachmentFullFilePath, iAttachmentBuffer.Decode(encodeBASE64))
      IF ErrorOccurred THEN
      	ErrorPropagate(ErrorInfo(errCode), ErrorInfo(errMessage))
      	result ""
      END
      
      result iAttachmentFullFilePath
      
      
      
      
      
      
      
     type : 458752
   -
     name : MSGraph_SetContext
     procedure_id : 1783509303094185884
     type_code : 15
     code : |1+
      // Summary: <specify the procedure action>
      // Syntax:
      //[ <Result> = ] MSGraph_SetContext (<vTenantId> is string, <vClientID> is string, <vClientSecret> is string)
      //
      // Parameters:
      //	vTenantId (ANSI string): <specify the role of vTenantId>
      //	vClientID (ANSI string): <specify the role of vClientID>
      //	vClientSecret (ANSI string): <specify the role of vClientSecret>
      // Example:
      // <Specify a usage example>
      //
      // Return value:
      //	iCurrentSoc (ANSI string - default value=""): <specify the role of iCurrentSoc>
      procedure MSGraph_SetContext(vTenantId is string, vClientID is string, vClientSecret is string)
      //TODO: Validate all input properties before set
      gMSGraphContext.vTenantId = vTenantId
      gMSGraphContext.vClientID		= vClientID
      gMSGraphContext.vClientSecret	= vClientSecret
      gMSGraphContext.vTokenPath = fExeDir() + "\MSAuthToken.raw";
      RESULT True
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : HgAAAB4AAADXPUOq6bQdTI/fs1mC0I6nimWl2G84EsAbne5i32IM05uoRA==
  original_name : GlobalProcedures1
resources :
 string_res :
  identifier : 0x15c36a760014c428
  internal_properties : HgAAAB4AAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
custom_note :
 internal_properties : HgAAAB4AAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
